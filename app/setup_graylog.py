import requests
import time
import json

def wait_for_graylog():
    """–ñ–¥–µ–º –ø–æ–∫–∞ Graylog —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω"""
    print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ Graylog...")
    for i in range(60):
        try:
            response = requests.get("http://graylog:9000/api", timeout=5)
            if response.status_code == 200:
                print("‚úÖ Graylog –≥–æ—Ç–æ–≤!")
                return True
        except:
            pass
        time.sleep(3)
    print("‚ùå Graylog –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 3 –º–∏–Ω—É—Ç—ã")
    return False

def setup_graylog_input():
    """–°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º GELF UDP Input"""
    
    try:
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è CSRF –∑–∞—â–∏—Ç—ã
        headers = {
            "Content-Type": "application/json",
            "X-Requested-By": "graylog-setup-script"
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ Inputs
        response = requests.get(
            "http://graylog:9000/api/system/inputs",
            auth=("admin", "admin"),
            headers=headers,
            timeout=10
        )
        
        if response.status_code == 200:
            inputs = response.json()['inputs']
            gelf_input = None
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π GELF Input
            for input in inputs:
                if input['type'] == 'org.graylog2.inputs.gelf.udp.GELFUDPInput':
                    gelf_input = input
                    break
            
            if gelf_input:
                print("‚úÖ GELF Input –Ω–∞–π–¥–µ–Ω")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                status_response = requests.get(
                    f"http://graylog:9000/api/system/inputs/{gelf_input['id']}",
                    auth=("admin", "admin"),
                    headers=headers
                )
                
                if status_response.status_code == 200:
                    input_status = status_response.json()
                    if not input_status['attributes']['running']:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                        start_response = requests.post(
                            f"http://graylog:9000/api/system/inputs/{gelf_input['id']}/start",
                            auth=("admin", "admin"),
                            headers=headers
                        )
                        if start_response.status_code == 204:
                            print("‚úÖ GELF Input –∑–∞–ø—É—â–µ–Ω!")
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {start_response.status_code}")
                    else:
                        print("‚úÖ GELF Input —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å Input")
            else:
                # –°–û–ó–î–ê–ï–ú –Ω–æ–≤—ã–π Input
                print("üîÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π GELF Input...")
                input_data = {
                    "title": "Python Apps Logs",
                    "type": "org.graylog2.inputs.gelf.udp.GELFUDPInput",
                    "configuration": {
                        "bind_address": "0.0.0.0",
                        "port": 12201,
                        "recv_buffer_size": 262144
                    },
                    "global": True
                }
                
                create_response = requests.post(
                    "http://graylog:9000/api/system/inputs",
                    json=input_data,
                    auth=("admin", "admin"),
                    headers=headers,
                    timeout=10
                )
                
                if create_response.status_code == 201:
                    print("‚úÖ GELF Input —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω!")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {create_response.status_code} - {create_response.text}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    if wait_for_graylog():
        setup_graylog_input()