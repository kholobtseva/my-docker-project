import json
import logging
import csv
import os
import time
from datetime import datetime
from kafka import KafkaConsumer

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def save_to_csv(data, filename='kafka_messages.csv'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª"""
    try:
        log_dir = '/app/logs'
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)
        
        filepath = os.path.join(log_dir, filename)
        file_exists = os.path.isfile(filepath)
        
        with open(filepath, 'a', newline='', encoding='utf-8') as f:
            writer = csv.writer(f, delimiter=';')
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π
            if not file_exists:
                headers = [
                    'kafka_timestamp', 'message_offset', 'message_count',
                    'contract', 'date', 'price', 'volume', 'currency',
                    'name_rus', 'source', 'sync_timestamp'
                ]
                writer.writerow(headers)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payload
            payload = data.get('payload', {})
            row = [
                data.get('kafka_timestamp', ''),
                data.get('message_offset', ''),
                data.get('message_count', ''),
                payload.get('contract', ''),
                payload.get('date', ''),
                payload.get('price', ''),
                payload.get('volume', ''),
                payload.get('currency', ''),
                payload.get('name_rus', ''),
                payload.get('source', ''),
                payload.get('sync_timestamp', '')
            ]
            
            writer.writerow(row)
        
        logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV: {filepath}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV: {e}")
        return False

def run_consumer():
    try:
        consumer = KafkaConsumer(
            'market-data',
            bootstrap_servers=['kafka:9092'],
            auto_offset_reset='latest',  # ‚Üê –ò–ó–ú–ï–ù–ò–õ –ù–ê LATEST
            value_deserializer=lambda m: json.loads(m.decode('utf-8')),
            group_id='csv_writer_group'
        )
        
        logger.info("‚úÖ Kafka consumer –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        csv_file = '/app/logs/kafka_messages.csv'
        if not os.path.exists(csv_file):
            with open(csv_file, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f, delimiter=';')
                headers = [
                    'kafka_timestamp', 'message_offset', 'message_count',
                    'contract', 'date', 'price', 'volume', 'currency',
                    'name_rus', 'source', 'sync_timestamp'
                ]
                writer.writerow(headers)
        
        message_count = 0
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        for message in consumer:
            data = message.value
            message_count += 1
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è CSV
            enriched_data = {
                'kafka_timestamp': datetime.now().isoformat(),
                'message_offset': message.offset,
                'message_count': message_count,
                'payload': data
            }
            
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #{message_count}: {data.get('contract', 'Unknown')} - {data.get('date', 'No date')}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
            if save_to_csv(enriched_data):
                logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ #{message_count} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ CSV")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è #{message_count}")
                
    except KeyboardInterrupt:
        logger.info("üõë Consumer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ consumer: {e}")

if __name__ == "__main__":
    run_consumer()