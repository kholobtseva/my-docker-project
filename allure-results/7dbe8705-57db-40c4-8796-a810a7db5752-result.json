{"name": "TC-REAL-006: Complete Data Flow Validation", "status": "broken", "statusDetails": {"message": "AttributeError: module 'app' has no attribute 'main'", "trace": "self = <tests.test_real_logic.TestRealBusinessLogic object at 0x000002564A8B6650>\n\n    @allure.story(\"Data Pipeline Integration\")\n    @allure.title(\"TC-REAL-006: Complete Data Flow Validation\")\n    @allure.description(\"Тестирование полного потока данных через моки\")\n    def test_complete_data_flow_with_mocks(self):\n        \"\"\"Тестируем полный поток данных через моки внешних сервисов\"\"\"\n    \n        with allure.step(\"Подготовка тестовых данных\"):\n            test_data = {\n                'id_value': 200,\n                'date': '2024-01-15',\n                'price': 106.25,\n                'volume': 1500,\n                'currency': 'USD',\n                'contract': 'FEFF24',\n                'name_rus': 'Железная руда 62% Fe',\n                'source': 'moex_sgx'\n            }\n    \n        with allure.step(\"Мокирование внешних зависимостей\"):\n            # Мокируем ВСЕ внешние сервисы\n>           with patch('app.main.Elasticsearch') as mock_es, \\\n                 patch('app.main.KafkaProducer') as mock_kafka, \\\n                 patch('app.main.psycopg2.connect') as mock_db:\n\ntests\\test_real_logic.py:219: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Python\\CPython311\\Lib\\unittest\\mock.py:1427: in __enter__\n    self.target = self.getter()\n                  ^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nname = 'app.main'\n\n    def resolve_name(name):\n        \"\"\"\n        Resolve a name to an object.\n    \n        It is expected that `name` will be a string in one of the following\n        formats, where W is shorthand for a valid Python identifier and dot stands\n        for a literal period in these pseudo-regexes:\n    \n        W(.W)*\n        W(.W)*:(W(.W)*)?\n    \n        The first form is intended for backward compatibility only. It assumes that\n        some part of the dotted name is a package, and the rest is an object\n        somewhere within that package, possibly nested inside other objects.\n        Because the place where the package stops and the object hierarchy starts\n        can't be inferred by inspection, repeated attempts to import must be done\n        with this form.\n    \n        In the second form, the caller makes the division point clear through the\n        provision of a single colon: the dotted name to the left of the colon is a\n        package to be imported, and the dotted name to the right is the object\n        hierarchy within that package. Only one import is needed in this form. If\n        it ends with the colon, then a module object is returned.\n    \n        The function will return an object (which might be a module), or raise one\n        of the following exceptions:\n    \n        ValueError - if `name` isn't in a recognised format\n        ImportError - if an import failed when it shouldn't have\n        AttributeError - if a failure occurred when traversing the object hierarchy\n                         within the imported package to get to the desired object.\n        \"\"\"\n        global _NAME_PATTERN\n        if _NAME_PATTERN is None:\n            # Lazy import to speedup Python startup time\n            import re\n            dotted_words = r'(?!\\d)(\\w+)(\\.(?!\\d)(\\w+))*'\n            _NAME_PATTERN = re.compile(f'^(?P<pkg>{dotted_words})'\n                                       f'(?P<cln>:(?P<obj>{dotted_words})?)?$',\n                                       re.UNICODE)\n    \n        m = _NAME_PATTERN.match(name)\n        if not m:\n            raise ValueError(f'invalid format: {name!r}')\n        gd = m.groupdict()\n        if gd.get('cln'):\n            # there is a colon - a one-step import is all that's needed\n            mod = importlib.import_module(gd['pkg'])\n            parts = gd.get('obj')\n            parts = parts.split('.') if parts else []\n        else:\n            # no colon - have to iterate to find the package boundary\n            parts = name.split('.')\n            modname = parts.pop(0)\n            # first part *must* be a module/package.\n            mod = importlib.import_module(modname)\n            while parts:\n                p = parts[0]\n                s = f'{modname}.{p}'\n                try:\n                    mod = importlib.import_module(s)\n                    parts.pop(0)\n                    modname = s\n                except ImportError:\n                    break\n        # if we reach this point, mod is the module, already imported, and\n        # parts is the list of parts in the object hierarchy to be traversed, or\n        # an empty list if just the module is wanted.\n        result = mod\n        for p in parts:\n>           result = getattr(result, p)\n                     ^^^^^^^^^^^^^^^^^^\nE           AttributeError: module 'app' has no attribute 'main'\n\nC:\\Python\\CPython311\\Lib\\pkgutil.py:715: AttributeError"}, "description": "Тестирование полного потока данных через моки", "steps": [{"name": "Подготовка тестовых данных", "status": "passed", "start": 1759705842765, "stop": 1759705842765}, {"name": "Мокирование внешних зависимостей", "status": "broken", "statusDetails": {"message": "AttributeError: module 'app' has no attribute 'main'\n", "trace": "  File \"C:\\Users\\kholo\\Desktop\\my_docker_project\\tests\\test_real_logic.py\", line 219, in test_complete_data_flow_with_mocks\n    with patch('app.main.Elasticsearch') as mock_es, \\\n  File \"C:\\Python\\CPython311\\Lib\\unittest\\mock.py\", line 1427, in __enter__\n    self.target = self.getter()\n                  ^^^^^^^^^^^^^\n  File \"C:\\Python\\CPython311\\Lib\\pkgutil.py\", line 715, in resolve_name\n    result = getattr(result, p)\n             ^^^^^^^^^^^^^^^^^^\n"}, "start": 1759705842765, "stop": 1759705843157}], "start": 1759705842765, "stop": 1759705843157, "uuid": "76dd71cb-4cb2-4fb1-aac0-b78db5e7437f", "historyId": "897b07e9a8f0ad7e5c59373a7e0fcecd", "testCaseId": "897b07e9a8f0ad7e5c59373a7e0fcecd", "fullName": "tests.test_real_logic.TestRealBusinessLogic#test_complete_data_flow_with_mocks", "labels": [{"name": "feature", "value": "Futures Data Pipeline"}, {"name": "story", "value": "Data Pipeline Integration"}, {"name": "epic", "value": "Real Business Logic"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_real_logic"}, {"name": "subSuite", "value": "TestRealBusinessLogic"}, {"name": "host", "value": "DESKTOP-DSLODPM"}, {"name": "thread", "value": "18528-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_real_logic"}]}