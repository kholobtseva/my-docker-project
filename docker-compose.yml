services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: my_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  python-script:
    build: .
    restart: "no"
    depends_on:
      - postgres
    environment:
      DB_HOST: postgres
      DB_NAME: my_db
      DB_USER: user
      DB_PASSWORD: password
    volumes:
      - .:/app

  moex-script:
    build: .
    command: python app/main_moex.py
    depends_on:
      - postgres
      - kafka
      - elasticsearch
    environment:
      DB_HOST: postgres
      DB_NAME: my_db
      DB_USER: user
      DB_PASSWORD: password
    volumes:
      - .:/app
    restart: "no"

  elasticsearch:
    image: elasticsearch:7.17.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"

  kibana:
    image: kibana:7.17.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
      
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  
  kafka:
    image: confluentinc/cp-kafka:7.4.4
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  kafka-consumer:
    build: .
    command: python app/kafka_consumer.py
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - .:/app
    restart: unless-stopped

  kafka-consumer-moex:
    build: .
    command: python app/kafka_consumer_moex.py
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - .:/app
    restart: unless-stopped
      
  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    depends_on:
      - kafka
      
  akhq:
    image: tchiotludo/akhq:latest
    ports:
      - "8080:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            local:
              properties:
                bootstrap.servers: "kafka:9092"
    depends_on:
      - kafka
      
  mongodb:
    image: mongo:5.0
    volumes:
      - mongodb_data:/data/db

  graylog:
    image: graylog/graylog:5.1
    environment:
      - GRAYLOG_PASSWORD_SECRET=some-secret-password
      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      - GRAYLOG_HTTP_EXTERNAL_URI=http://localhost:9001/
      - GRAYLOG_MONGODB_URI=mongodb://mongodb:27017/graylog
    ports:
      - "9001:9000"
      - "12201:12201/udp"
    volumes:
      - graylog_journal:/usr/share/graylog/data/journal
    depends_on:
      - mongodb
      - elasticsearch
      
  graylog-setup:
    build: .
    command: python app/setup_graylog.py
    depends_on:
      - graylog
    restart: "no"

volumes:
  postgres_data:
  mongodb_data:
  graylog_journal: